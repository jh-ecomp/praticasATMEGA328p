
timer0AndTimer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ec  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000647  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058c  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000f4cd  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00010a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00010b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000158  00000000  00000000  00010b2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__vector_13>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__vector_16>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	60 d0       	rcall	.+192    	; 0x146 <main>
  86:	62 c0       	rjmp	.+196    	; 0x14c <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <__vector_16>:
#include <asf.h>
#define cpl_bit(y,bit) (y^=(1<<bit))
int cont = 0;


ISR(TIMER0_OVF_vect){
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
	
	if(!cont){
  98:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  9c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a0:	89 2b       	or	r24, r25
  a2:	29 f4       	brne	.+10     	; 0xae <__vector_16+0x24>
		PORTB = 0b11111011;
  a4:	8b ef       	ldi	r24, 0xFB	; 251
  a6:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b00000110; 
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	8b b9       	out	0x0b, r24	; 11
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__vector_16+0x2c>
	}else{
		PORTB = 0b11111101;
  ae:	8d ef       	ldi	r24, 0xFD	; 253
  b0:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b10111111; 
  b2:	8f eb       	ldi	r24, 0xBF	; 191
  b4:	8b b9       	out	0x0b, r24	; 11
	}
	cont = (cont + 1) % 2;
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	90 78       	andi	r25, 0x80	; 128
  c4:	99 23       	and	r25, r25
  c6:	24 f4       	brge	.+8      	; 0xd0 <__vector_16+0x46>
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	8e 6f       	ori	r24, 0xFE	; 254
  cc:	9f 6f       	ori	r25, 0xFF	; 255
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_13>:

ISR(TIMER1_OVF_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	cpl_bit(PORTC, PC0);
  f4:	98 b1       	in	r25, 0x08	; 8
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 27       	eor	r24, r25
  fa:	88 b9       	out	0x08, r24	; 8
}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <setup>:


void setup(){
	// Timer0 Config
	TCCR0A = 0x00;
 10a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x04;
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0x01;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0x0000;
 116:	16 bc       	out	0x26, r1	; 38
	
	// Timer1 Config
	TCCR1A = 0x00;
 118:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x04;
 11c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0x01;
 120:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0x0BDC;
 124:	2c ed       	ldi	r18, 0xDC	; 220
 126:	3b e0       	ldi	r19, 0x0B	; 11
 128:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12c:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	// Port Config
	DDRD = 0xff;
 130:	9f ef       	ldi	r25, 0xFF	; 255
 132:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0b00000000;
 134:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0x06;
 136:	96 e0       	ldi	r25, 0x06	; 6
 138:	94 b9       	out	0x04, r25	; 4
	PORTB = 0b11111001;
 13a:	99 ef       	ldi	r25, 0xF9	; 249
 13c:	95 b9       	out	0x05, r25	; 5
	
	DDRC = 0x01;
 13e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b11111110;
 140:	8e ef       	ldi	r24, 0xFE	; 254
 142:	88 b9       	out	0x08, r24	; 8
 144:	08 95       	ret

00000146 <main>:
}

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	setup();
 146:	e1 df       	rcall	.-62     	; 0x10a <setup>
	sei();
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x4>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
