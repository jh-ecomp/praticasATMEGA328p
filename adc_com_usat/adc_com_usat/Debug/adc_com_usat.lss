
adc_com_usat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a8  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b6  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c2  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d39  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ab  00000000  00000000  000084e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008690  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000000a8  00000000  00000000  000086d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	a0 c0       	rjmp	.+320    	; 0x176 <__vector_13>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__vector_16>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	1a c0       	rjmp	.+52     	; 0x8a <__vector_21>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	6d d0       	rcall	.+218    	; 0x160 <main>
  86:	db c0       	rjmp	.+438    	; 0x23e <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <__vector_21>:
void setup();
void USART_Transmit( unsigned char data );
unsigned char USART_Receive( void );


ISR(ADC_vect){
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
	sensor_id = (55 * ADCH) / 255;
  a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  a8:	27 e3       	ldi	r18, 0x37	; 55
  aa:	82 9f       	mul	r24, r18
  ac:	c0 01       	movw	r24, r0
  ae:	11 24       	eor	r1, r1
  b0:	6f ef       	ldi	r22, 0xFF	; 255
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	9d d0       	rcall	.+314    	; 0x1f0 <__divmodhi4>
  b6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
  ba:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	cpl_bit(PORTB, PB0);
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	85 b9       	out	0x05, r24	; 5
}
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	7f 91       	pop	r23
  d0:	6f 91       	pop	r22
  d2:	5f 91       	pop	r21
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_16>:

ISR(TIMER0_OVF_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
	
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <setup>:


void setup(){	
	
//	PORT Config
	DDRD = 0x02;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xfc;
  f8:	8c ef       	ldi	r24, 0xFC	; 252
  fa:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0x03;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xf0;
 100:	80 ef       	ldi	r24, 0xF0	; 240
 102:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0x00;
 104:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
 106:	18 b8       	out	0x08, r1	; 8
	
/*	ADC CONFIG	*/
	ADMUX  = 0b01100001;	/*	LEFT ADJUST, INPUT CHANEL SELECT = ADC1	*/
 108:	81 e6       	ldi	r24, 0x61	; 97
 10a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = 0b00000100;	/*	ANALOG COMPARATOR OFF, TRIGGER BY TIMER0 OVERFLOW	*/
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA = 0b11101000;	/*	ENABLE ADC, START CONVERSION, ENABLE ADC AUTO TRIGGER, SET 2 TO DIVISION FACTOR BETWEEN SYSTEM CLOCK FREQUENCY
 114:	98 ee       	ldi	r25, 0xE8	; 232
 116:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
							AND INPUT CLOCK TO THE ADC*/
	
//	TIMER 0 Config
	TCCR0A = 0x00;
 11a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x04;
 11c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01;
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0x00;
 124:	16 bc       	out	0x26, r1	; 38
	
//  Configurando TIMER1
	TCCR1A = 0x00;  //  modo de comparação desligado
 126:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x04;  //  sem PWM e prescale 256
 12a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = 0x01;  //  interrupção por overflow habilitada
 12e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1  = 0x0000;  //  valor de onde o contador vai começar
 132:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 136:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

// USART Config
	baud_rate = MYUBRR;
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <baud_rate+0x1>
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <baud_rate>
	/*setando o baud rate*/
	UBRR0H = (unsigned char) (baud_rate>>8);
 146:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) baud_rate;
 14a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <baud_rate>
 14e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*habilitando o TX e RX*/
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 152:	88 e1       	ldi	r24, 0x18	; 24
 154:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/*setando o formato do frame*/
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 158:	8e e0       	ldi	r24, 0x0E	; 14
 15a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 15e:	08 95       	ret

00000160 <main>:


int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	setup();
 160:	c9 df       	rcall	.-110    	; 0xf4 <setup>
	sei();
 162:	78 94       	sei
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0x4>

00000166 <USART_Transmit>:
}


void USART_Transmit( unsigned char data ){
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	95 ff       	sbrs	r25, 5
 16e:	fd cf       	rjmp	.-6      	; 0x16a <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 174:	08 95       	ret

00000176 <__vector_13>:
}

ISR(TIMER0_OVF_vect){
	
}
ISR(TIMER1_OVF_vect){
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	
	USART_Transmit((sensor_id / 10) + '0');
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a4:	ca e0       	ldi	r28, 0x0A	; 10
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	be 01       	movw	r22, r28
 1aa:	22 d0       	rcall	.+68     	; 0x1f0 <__divmodhi4>
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	86 0f       	add	r24, r22
 1b0:	da df       	rcall	.-76     	; 0x166 <USART_Transmit>
	USART_Transmit((sensor_id % 10) + '0');
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ba:	be 01       	movw	r22, r28
 1bc:	19 d0       	rcall	.+50     	; 0x1f0 <__divmodhi4>
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	d2 df       	rcall	.-92     	; 0x166 <USART_Transmit>
	cpl_bit(PORTB, PB0);
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 27       	eor	r24, r25
 1c8:	85 b9       	out	0x05, r24	; 5
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__divmodhi4>:
 1f0:	97 fb       	bst	r25, 7
 1f2:	07 2e       	mov	r0, r23
 1f4:	16 f4       	brtc	.+4      	; 0x1fa <__divmodhi4+0xa>
 1f6:	00 94       	com	r0
 1f8:	06 d0       	rcall	.+12     	; 0x206 <__divmodhi4_neg1>
 1fa:	77 fd       	sbrc	r23, 7
 1fc:	08 d0       	rcall	.+16     	; 0x20e <__divmodhi4_neg2>
 1fe:	0b d0       	rcall	.+22     	; 0x216 <__udivmodhi4>
 200:	07 fc       	sbrc	r0, 7
 202:	05 d0       	rcall	.+10     	; 0x20e <__divmodhi4_neg2>
 204:	3e f4       	brtc	.+14     	; 0x214 <__divmodhi4_exit>

00000206 <__divmodhi4_neg1>:
 206:	90 95       	com	r25
 208:	81 95       	neg	r24
 20a:	9f 4f       	sbci	r25, 0xFF	; 255
 20c:	08 95       	ret

0000020e <__divmodhi4_neg2>:
 20e:	70 95       	com	r23
 210:	61 95       	neg	r22
 212:	7f 4f       	sbci	r23, 0xFF	; 255

00000214 <__divmodhi4_exit>:
 214:	08 95       	ret

00000216 <__udivmodhi4>:
 216:	aa 1b       	sub	r26, r26
 218:	bb 1b       	sub	r27, r27
 21a:	51 e1       	ldi	r21, 0x11	; 17
 21c:	07 c0       	rjmp	.+14     	; 0x22c <__udivmodhi4_ep>

0000021e <__udivmodhi4_loop>:
 21e:	aa 1f       	adc	r26, r26
 220:	bb 1f       	adc	r27, r27
 222:	a6 17       	cp	r26, r22
 224:	b7 07       	cpc	r27, r23
 226:	10 f0       	brcs	.+4      	; 0x22c <__udivmodhi4_ep>
 228:	a6 1b       	sub	r26, r22
 22a:	b7 0b       	sbc	r27, r23

0000022c <__udivmodhi4_ep>:
 22c:	88 1f       	adc	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	5a 95       	dec	r21
 232:	a9 f7       	brne	.-22     	; 0x21e <__udivmodhi4_loop>
 234:	80 95       	com	r24
 236:	90 95       	com	r25
 238:	bc 01       	movw	r22, r24
 23a:	cd 01       	movw	r24, r26
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
